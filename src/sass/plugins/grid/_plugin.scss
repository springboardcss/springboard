@use 'class' as *;

.flex {
  display: -ms-flexbox;
  display: flex;
  margin-left: calc(#{$horizontal} * -1);
  width: calc(100% + #{$horizontal});
  flex-wrap: wrap;
  transition: all .3s ease;
}

.flex > * {
  box-sizing: border-box;
  flex: 1 1 auto; /* Default for IE10 bug */
  padding-left: $horizontal;
  padding-bottom: $vertical;
  &:last-child {
    padding-bottom: 0;
  }
}

.flex {
  &[class*="one"],
  &[class*="two"],
  &[class*="three"],
  &[class*="four"],
  &[class*="five"],
  &[class*="six"],
  &[class*="seven"],
  &[class*="eight"],
  &[class*="nine"],
  &[class*="ten"],
  &[class*="eleven"],
  &[class*="twelve"] {
    > * {
      flex-grow: 0;
    }
  }
}

.flex.grow > * {
  flex-grow: 1;
}

.center {
  justify-content: center;
}

@each $count in $grid-count {
  .#{$count} > * {
    width: map-get($grid-count-sizes, $count);
  }
}

@each $i in $grid-sizes {
  @media all and (min-width: unquote($i + 'px')) {
    @each $count in $grid-count {
      .#{$count}-#{$i} > * {
        width: map-get($grid-count-sizes, $count);
      }
    }
  }
}


// Children sizing
@each $part in $grid-part {
  .#{$part} {
    width: map-get($grid-part-sizes, $part);
  }
}
.none { display: none; }


@each $i in $grid-sizes {
  @media all and (min-width: unquote($i + 'px')) {
    @each $part in $grid-part {
      .#{$part}-#{$i} {
        width: map-get($grid-part-sizes, $part);
        display: block;
      }
    }
  }
}
@each $i in $grid-children {
  @media all and (min-width: unquote($i + 'px')) {
    .none-#{$i} { display: none; }
  }
}



@each $part in $grid-offpart {
  .off-#{$part} {
    margin-left: map-get($grid-offpart-sizes, $part);
  }
}


@each $i in $grid-sizes {
  @media all and (min-width: unquote($i + 'px')) {
    @each $part in $grid-offpart {
      .off-#{$part}-#{$i} {
        margin-left: map-get($grid-offpart-sizes, $part);
      }
    }
  }
}
